/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserModel as PrismaUserModel,
  UserConfig as PrismaUserConfig,
  UsersWorkspace as PrismaUsersWorkspace,
  UserVerificationCode as PrismaUserVerificationCode,
} from "@prisma/client";

export class UserModelServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.UserModelCountArgs, "select">
  ): Promise<number> {
    return this.prisma.userModel.count(args);
  }

  async userModels<T extends Prisma.UserModelFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserModelFindManyArgs>
  ): Promise<PrismaUserModel[]> {
    return this.prisma.userModel.findMany<Prisma.UserModelFindManyArgs>(args);
  }
  async userModel<T extends Prisma.UserModelFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserModelFindUniqueArgs>
  ): Promise<PrismaUserModel | null> {
    return this.prisma.userModel.findUnique(args);
  }
  async createUserModel<T extends Prisma.UserModelCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserModelCreateArgs>
  ): Promise<PrismaUserModel> {
    return this.prisma.userModel.create<T>(args);
  }
  async updateUserModel<T extends Prisma.UserModelUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserModelUpdateArgs>
  ): Promise<PrismaUserModel> {
    return this.prisma.userModel.update<T>(args);
  }
  async deleteUserModel<T extends Prisma.UserModelDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserModelDeleteArgs>
  ): Promise<PrismaUserModel> {
    return this.prisma.userModel.delete(args);
  }

  async findUserConfigs(
    parentId: string,
    args: Prisma.UserConfigFindManyArgs
  ): Promise<PrismaUserConfig[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userConfigs(args);
  }

  async findUsersWorkspaces(
    parentId: string,
    args: Prisma.UsersWorkspaceFindManyArgs
  ): Promise<PrismaUsersWorkspace[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .usersWorkspaces(args);
  }

  async findUserVerificationCodes(
    parentId: string,
    args: Prisma.UserVerificationCodeFindManyArgs
  ): Promise<PrismaUserVerificationCode[]> {
    return this.prisma.userModel
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userVerificationCodes(args);
  }
}
