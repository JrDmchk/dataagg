/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserModel } from "./UserModel";
import { UserModelCountArgs } from "./UserModelCountArgs";
import { UserModelFindManyArgs } from "./UserModelFindManyArgs";
import { UserModelFindUniqueArgs } from "./UserModelFindUniqueArgs";
import { CreateUserModelArgs } from "./CreateUserModelArgs";
import { UpdateUserModelArgs } from "./UpdateUserModelArgs";
import { DeleteUserModelArgs } from "./DeleteUserModelArgs";
import { UserConfigFindManyArgs } from "../../userConfig/base/UserConfigFindManyArgs";
import { UserConfig } from "../../userConfig/base/UserConfig";
import { UsersWorkspaceFindManyArgs } from "../../usersWorkspace/base/UsersWorkspaceFindManyArgs";
import { UsersWorkspace } from "../../usersWorkspace/base/UsersWorkspace";
import { UserVerificationCodeFindManyArgs } from "../../userVerificationCode/base/UserVerificationCodeFindManyArgs";
import { UserVerificationCode } from "../../userVerificationCode/base/UserVerificationCode";
import { UserModelService } from "../userModel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserModel)
export class UserModelResolverBase {
  constructor(
    protected readonly service: UserModelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "read",
    possession: "any",
  })
  async _userModelsMeta(
    @graphql.Args() args: UserModelCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserModel])
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "read",
    possession: "any",
  })
  async userModels(
    @graphql.Args() args: UserModelFindManyArgs
  ): Promise<UserModel[]> {
    return this.service.userModels(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserModel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "read",
    possession: "own",
  })
  async userModel(
    @graphql.Args() args: UserModelFindUniqueArgs
  ): Promise<UserModel | null> {
    const result = await this.service.userModel(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserModel)
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "create",
    possession: "any",
  })
  async createUserModel(
    @graphql.Args() args: CreateUserModelArgs
  ): Promise<UserModel> {
    return await this.service.createUserModel({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserModel)
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "update",
    possession: "any",
  })
  async updateUserModel(
    @graphql.Args() args: UpdateUserModelArgs
  ): Promise<UserModel | null> {
    try {
      return await this.service.updateUserModel({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserModel)
  @nestAccessControl.UseRoles({
    resource: "UserModel",
    action: "delete",
    possession: "any",
  })
  async deleteUserModel(
    @graphql.Args() args: DeleteUserModelArgs
  ): Promise<UserModel | null> {
    try {
      return await this.service.deleteUserModel(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserConfig], { name: "userConfigs" })
  @nestAccessControl.UseRoles({
    resource: "UserConfig",
    action: "read",
    possession: "any",
  })
  async findUserConfigs(
    @graphql.Parent() parent: UserModel,
    @graphql.Args() args: UserConfigFindManyArgs
  ): Promise<UserConfig[]> {
    const results = await this.service.findUserConfigs(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UsersWorkspace], { name: "usersWorkspaces" })
  @nestAccessControl.UseRoles({
    resource: "UsersWorkspace",
    action: "read",
    possession: "any",
  })
  async findUsersWorkspaces(
    @graphql.Parent() parent: UserModel,
    @graphql.Args() args: UsersWorkspaceFindManyArgs
  ): Promise<UsersWorkspace[]> {
    const results = await this.service.findUsersWorkspaces(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [UserVerificationCode], {
    name: "userVerificationCodes",
  })
  @nestAccessControl.UseRoles({
    resource: "UserVerificationCode",
    action: "read",
    possession: "any",
  })
  async findUserVerificationCodes(
    @graphql.Parent() parent: UserModel,
    @graphql.Args() args: UserVerificationCodeFindManyArgs
  ): Promise<UserVerificationCode[]> {
    const results = await this.service.findUserVerificationCodes(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }
}
