/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { OrganizationsWorkspace } from "./OrganizationsWorkspace";
import { OrganizationsWorkspaceCountArgs } from "./OrganizationsWorkspaceCountArgs";
import { OrganizationsWorkspaceFindManyArgs } from "./OrganizationsWorkspaceFindManyArgs";
import { OrganizationsWorkspaceFindUniqueArgs } from "./OrganizationsWorkspaceFindUniqueArgs";
import { CreateOrganizationsWorkspaceArgs } from "./CreateOrganizationsWorkspaceArgs";
import { UpdateOrganizationsWorkspaceArgs } from "./UpdateOrganizationsWorkspaceArgs";
import { DeleteOrganizationsWorkspaceArgs } from "./DeleteOrganizationsWorkspaceArgs";
import { Organization } from "../../organization/base/Organization";
import { Workspace } from "../../workspace/base/Workspace";
import { OrganizationsWorkspaceService } from "../organizationsWorkspace.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => OrganizationsWorkspace)
export class OrganizationsWorkspaceResolverBase {
  constructor(
    protected readonly service: OrganizationsWorkspaceService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "OrganizationsWorkspace",
    action: "read",
    possession: "any",
  })
  async _organizationsWorkspacesMeta(
    @graphql.Args() args: OrganizationsWorkspaceCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [OrganizationsWorkspace])
  @nestAccessControl.UseRoles({
    resource: "OrganizationsWorkspace",
    action: "read",
    possession: "any",
  })
  async organizationsWorkspaces(
    @graphql.Args() args: OrganizationsWorkspaceFindManyArgs
  ): Promise<OrganizationsWorkspace[]> {
    return this.service.organizationsWorkspaces(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => OrganizationsWorkspace, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "OrganizationsWorkspace",
    action: "read",
    possession: "own",
  })
  async organizationsWorkspace(
    @graphql.Args() args: OrganizationsWorkspaceFindUniqueArgs
  ): Promise<OrganizationsWorkspace | null> {
    const result = await this.service.organizationsWorkspace(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrganizationsWorkspace)
  @nestAccessControl.UseRoles({
    resource: "OrganizationsWorkspace",
    action: "create",
    possession: "any",
  })
  async createOrganizationsWorkspace(
    @graphql.Args() args: CreateOrganizationsWorkspaceArgs
  ): Promise<OrganizationsWorkspace> {
    return await this.service.createOrganizationsWorkspace({
      ...args,
      data: {
        ...args.data,

        organization: args.data.organization
          ? {
              connect: args.data.organization,
            }
          : undefined,

        workspace: args.data.workspace
          ? {
              connect: args.data.workspace,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => OrganizationsWorkspace)
  @nestAccessControl.UseRoles({
    resource: "OrganizationsWorkspace",
    action: "update",
    possession: "any",
  })
  async updateOrganizationsWorkspace(
    @graphql.Args() args: UpdateOrganizationsWorkspaceArgs
  ): Promise<OrganizationsWorkspace | null> {
    try {
      return await this.service.updateOrganizationsWorkspace({
        ...args,
        data: {
          ...args.data,

          organization: args.data.organization
            ? {
                connect: args.data.organization,
              }
            : undefined,

          workspace: args.data.workspace
            ? {
                connect: args.data.workspace,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => OrganizationsWorkspace)
  @nestAccessControl.UseRoles({
    resource: "OrganizationsWorkspace",
    action: "delete",
    possession: "any",
  })
  async deleteOrganizationsWorkspace(
    @graphql.Args() args: DeleteOrganizationsWorkspaceArgs
  ): Promise<OrganizationsWorkspace | null> {
    try {
      return await this.service.deleteOrganizationsWorkspace(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Organization, {
    nullable: true,
    name: "organization",
  })
  @nestAccessControl.UseRoles({
    resource: "Organization",
    action: "read",
    possession: "any",
  })
  async getOrganization(
    @graphql.Parent() parent: OrganizationsWorkspace
  ): Promise<Organization | null> {
    const result = await this.service.getOrganization(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Workspace, {
    nullable: true,
    name: "workspace",
  })
  @nestAccessControl.UseRoles({
    resource: "Workspace",
    action: "read",
    possession: "any",
  })
  async getWorkspace(
    @graphql.Parent() parent: OrganizationsWorkspace
  ): Promise<Workspace | null> {
    const result = await this.service.getWorkspace(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
